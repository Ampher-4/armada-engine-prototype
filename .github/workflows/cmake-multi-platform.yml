name: CMake on multiple platforms

on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
  workflow_dispatch: # only trigger on manual

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]  # 修正为官方 OS 名称
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Fix submodule URLs to use HTTPS
      run: |
        git config --global url."https://github.com/".insteadOf "git@github.com:"
    - name: Init git submodules
      run: git submodule update --init --recursive


#    - name: Cache vcpkg installed packages
#      if: matrix.os == 'windows-latest'
#      uses: actions/cache@v3
#      with:
#        path: ${{ runner.workspace }}/vcpkg_cache
#        key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
#        restore-keys: |
#          ${{ runner.os }}-vcpkg-

    - name: Setup vcpkg (Windows only)
#      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '7d75835b57e79e8c183e022d1e7c13394c6d52c1'
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg_cache
        runVcpkgInstall: true
#        additionalCachedPaths: ${{ github.workspace }}/vcpkg/installed



#    # Windows: 用 vcpkg 安装依赖并缓存
#    - name: Setup vcpkg (Windows only)
#      if: matrix.os == 'windows-latest'
#      uses: lukka/run-vcpkg@v11
#      with:
#        vcpkgGitCommitId: '7d75835b57e79e8c183e022d1e7c13394c6d52c1'
#        runVcpkgInstall: true
#        vcpkgDirectory: ${{ runner.cache-dir }}/vcpkg  # 缓存到 runner 缓存目录
#        # 启用 vcpkg 缓存（lukka/run-vcpkg 自带缓存逻辑）
#        additionalCachedPaths: ${{ runner.cache-dir }}/vcpkg/installed


#    # Linux: 用 apt 安装依赖并缓存
#    - name: Cache Linux dependencies
#      if: matrix.os == 'ubuntu-latest'
#      uses: actions/cache@v3
#      with:
#        path: |
#          /var/cache/apt/archives  # apt 缓存的 deb 包路径
#          /var/lib/apt/lists       # apt 索引缓存
#        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}  # 依赖不变则缓存有效
#        restore-keys: |
#          ${{ runner.os }}-apt-
#
#    - name: Setup Dependencies (Linux Only)
#      if: matrix.os == 'ubuntu-latest'
#      run: |
#        sudo apt-get update
#        sudo apt-get install -y \
#          ccache \
#          libsdl2-dev \
#          libsdl2-image-dev \
#          libglew-dev \
#          libglm-dev \
#          libassimp-dev \
#          libyaml-cpp-dev \
#          libspdlog-dev \
#          mesa-common-dev \
#          libglu1-mesa-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake #(Windows)
#      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

#    - name: Configure CMake (Linux)
#      if: matrix.os == 'ubuntu-latest'
#      run: >
#        cmake -B ${{ steps.strings.outputs.build-output-dir }}
#        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#    - name: Upload sandbox artifact
#      uses: actions/upload-artifact@v4
#      with:
#        name: sandbox-${{ matrix.os }}
#        path: |
#          ${{ github.workspace }}/build/Sandbox/Release/*   # for Windows
#          ${{ github.workspace }}/build/Sandbox/*           # for Linux

    - name: Package build output
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r armada-${{ matrix.os }}.zip sandbox/${{ matrix.build_type }}

    - name: Upload packaged artifact
      uses: actions/upload-artifact@v4
      with:
        name: armada-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/armada-${{ matrix.os }}.zip

#    - name: Create GitHub Release
#      if: github.event_name == 'workflow_dispatch'  
#      uses: softprops/action-gh-release@v2
#      with:
#        tag_name: scorching_ashes
#        name: "Armada Engine Demo Build ${{ matrix.os }}"
#        draft: false
#        prerelease: false
#        files: |
#          ${{ steps.strings.outputs.build-output-dir }}/armada-${{ matrix.os }}.zip
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}